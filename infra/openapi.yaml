openapi: 3.0.3

info:
  title: Product API
  description: API defining the operations available in the Product API
  version: 0.1.0
servers:
  - url: "https://microtema.de"
    description: Production API endpoint for the Product API

components:
  schemas:
    Message:
      type: object
      properties:
        message:
          type: string
    Product:
      type: object
      properties:
        product_id:
          type: string
        category:
          type: string
        product_rating:
          type: integer
        product_name:
          type: string
        product_price:
          type: integer
        product_description:
          type: string
    Products:
      type: array
      items:
        - allOf:
            - $ref: '#/components/schemas/Product'

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      name: x-api-key
      in: header

paths:
  /product/{product_id}:
    get:
      operationId: getProduct
      description: Get Product
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: product_id
          in: path
          required: true
          description: Product ID of the existing product to receive from database
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${get_product_lambda_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
        contentHandling: "CONVERT_TO_TEXT"
      x-amazon-apigateway-auth:
        type: "NONE"
      x-amazon-apigateway-api-key-source: "HEADER"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
    delete:
      operationId: deleteProduct
      description: Delete Product
      security:
        - ApiKeyAuth: [ ]
      parameters:
        - name: product_id
          in: path
          required: false
          description: Product ID of the existing product to delete from database
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${delete_product_lambda_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
        contentHandling: "CONVERT_TO_TEXT"
      x-amazon-apigateway-auth:
        type: "NONE"
      x-amazon-apigateway-api-key-source: "HEADER"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
  /product:
    post:
      operationId: createProduct
      description: Create a Product
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        description: Create a Product
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${create_product_lambda_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
        contentHandling: "CONVERT_TO_TEXT"
      x-amazon-apigateway-auth:
        type: "NONE"
      x-amazon-apigateway-api-key-source: "HEADER"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
    get:
      operationId: QueryProducts
      description: Query Products
      security:
        - ApiKeyAuth: []
      parameters:
        - name: product_id
          in: query
          required: false
          description: Product ID of the existing product to search in database
      x-amazon-apigateway-integration:
        uri: "arn:aws:apigateway:${aws_region}:lambda:path/2015-03-31/functions/${query_product_lambda_arn}/invocations"
        passthroughBehavior: "when_no_match"
        httpMethod: "POST"
        timeoutInMillis: ${lambda_identity_timeout}
        type: "aws_proxy"
        contentHandling: "CONVERT_TO_TEXT"
      x-amazon-apigateway-auth:
        type: "NONE"
      x-amazon-apigateway-api-key-source: "HEADER"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"

security:
  - ApiKeyAuth: [ ]